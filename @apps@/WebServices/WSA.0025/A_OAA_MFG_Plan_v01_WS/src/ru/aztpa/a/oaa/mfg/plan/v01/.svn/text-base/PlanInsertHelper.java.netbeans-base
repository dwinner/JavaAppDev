package ru.aztpa.a.oaa.mfg.plan.v01;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import javax.annotation.Resource;
import javax.sql.DataSource;
import ru.aztpa.a.oaa.mfg.plan.v01.process.PlanQueryBuilder;

/**
 * Вспомогательный класс для вставки данных в таблицы XXODI.XXBI_PLANS, XXODI.XXBI_PLANPOSITIONS СУБД Oracle
 * <p/>
 * @version 1.0.0 04.05.2012
 * @author jdeveloper@aztpa.ru
 */
class PlanInsertHelper
{
   @Resource(name = "ORACLE_JNDI")  // FIXME: Измените имя JNDI для развертывания на другом App-сервере
   private DataSource ds;
   private Connection conn;

   PlanInsertHelper()
   {
   }

   /**
    * Делегируемый метод операции Web-сервиса
    * <p/>
    * @param plan Объект план для последующего "обертывания" в SOAP-request
    * <p/>
    * @return returns ru.aztpa.a.oaa.mfg.plan.v01.ActionResult
    */
   ActionResult doCreatePlan(Plan plan)
   {
      ActionResult actionResult = new ActionResult();
      PlanQueryBuilder builder = new PlanQueryBuilder(plan);
      if (plan == null)
      {
         actionResult.setErrorCode("1");
         actionResult.setMessage("No plan detected");
         actionResult.setStatus("Fail status");
         return actionResult;
      }

      try
      {
         try
         {
            takeConnect();
            // TODO: Выполнить вставку данных insertPlan(Plan aPlan)
         }
         finally
         {
            releaseConnect();
         }
      }
      catch (SQLException ex)
      {
         // TODO: Записать в actionResult исключение
      }
      
      return actionResult;
   }

   /**
    * Взятие одного соединения из пула подключений.
    * <p/>
    * @throws SQLException
    */
   void takeConnect() throws SQLException
   {
      if (ds == null)
      {
         throw new SQLException("No data source");
      }
      conn = ds.getConnection();
      if (conn == null)
      {
         throw new SQLException("No connection");
      }
   }

   /**
    * Освобождение занятого соединения обратно в пул подключений.
    * <p/>
    * @throws SQLException
    */
   void releaseConnect() throws SQLException
   {
      if (conn != null)
      {
         if (!conn.isClosed())
         {
            conn.close();
         }
      }
   }

   /**
    * Проверка поддержки для пакетных операций обновления.
    */
   private void checkForBatchUpdateSupport()
   {
      try
      {
         DatabaseMetaData dbmd = conn.getMetaData();
         if (!dbmd.supportsBatchUpdates())
         {
            throw new SQLException("Bad Oracle JDBC Driver detected");
         }
      }
      catch (SQLException sqlEx)
      {
         for (Throwable t : sqlEx)
         {
            t.fillInStackTrace();
         }
         sqlEx.fillInStackTrace();
         throw new RuntimeException(sqlEx);
      }
   }

   /**
    * Проверка наличия подключения.
    */
   private void checkForConnection()
   {
      if (conn == null)
      {
         throw new RuntimeException("No connection");
      }
      try
      {
         if (conn.isClosed())
         {
            throw new SQLException("Connection is closed");
         }
      }
      catch (SQLException sqlEx)
      {
         for (Throwable t : sqlEx)
         {
            t.fillInStackTrace();
         }
         sqlEx.fillInStackTrace();
         throw new RuntimeException(sqlEx);
      }
   }

   /**
    * Вставка строки в таблицу XXODI.XXBI_PLANS.
    * @param aPlan План
    */
   private void insertPlan(Plan aPlan)
   {
      checkForConnection();
   }

   /**
    * Вставка строк в таблицу XXODI.XXBI_PLANPOSITIONS.
    * @param aPlan План
    */
   private void insertPlanPositions(Plan aPlan)
   {
      checkForConnection();
   }
}
