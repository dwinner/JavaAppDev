package ru.aztpa.a.oaa.mfg.legacydata.v01;

import ru.aztpa.a.oaa.mfg.legacydata.dbutilities.CachedDBConn;

import javax.naming.NamingException;
import java.sql.*;
import java.util.List;

/**
 * Вызывающий посредник Web-сервиса.
 * @author jdeveloper@aztpa.ru
 * @version 2.0 <b>1.0: 26.03.2012</b> <h3>31.05.2012 Updated</h3>
 */
public class CallerMediator
{
    public static final String DEFAULT_NAMING_CONTEXT = "Datolite";    // OAADataSource
    public static final Connection dbConn;

    static
    {
        try
        {
            dbConn = CachedDBConn.getCacheConnection(DEFAULT_NAMING_CONTEXT);
        }
        catch (Exception sqlOrNamingEx)
        {            
            throw new RuntimeException(sqlOrNamingEx);
        }        
    }

    /**
     * Default-конструктор посредника. Проверяет наличие доступности пакетных операций DML
     */
    public CallerMediator()
    {
        try
        {
            DatabaseMetaData dbmd = dbConn.getMetaData();
            if (!dbmd.supportsBatchUpdates())
                throw new SQLException("Bad Oracle JDBC Driver detected");
        }
        catch (SQLException sqlEx)
        {
            throw new RuntimeException(sqlEx);
        }
    }

    /**
     * Заполнение таблиц СУБД Oracle, содержащие описание тех. процессов.
     * @param process Список тех. процессов
     * @return Объект, инкапсулирующий результат выполнения.
     * @throws SQLException
     */
    public ActionResult doUpdateProcessOperations(List<TechnologyProcess> process)
        throws SQLException
    {
        ActionResult actionResult = new ActionResult();
        actionResult.setErrorCode(Integer.valueOf(0));  // PENDING: Значение не несет смысловой нагрузки
        actionResult.setMessage("");
        actionResult.setResult("");
        if (process == null)
        {
            actionResult.setMessage("No process list");
            actionResult.setResult("No result");
            return actionResult;
        }
        if (process.isEmpty())
        {
            actionResult.setMessage("Process list is empty");
            actionResult.setResult("No result");
            return actionResult;
        }

        int affectedProcesses = 0;
        int affectedOperations = 0;
        int affectedSteps = 0;

        for (TechnologyProcess technologyProcess : process)
        {   // Проход по тех. процессам
            long currentProcessId = technologyProcess.getProcessId();

            if (technologyProcess.getOperations() == null)
                continue;
            Operations currentOperations = technologyProcess.getOperations();
            if (currentOperations.getOperation() == null)
                continue;
            if (currentOperations.getOperation().isEmpty())
                continue;

            Statement operationsStat = null;
            boolean autoCommit = dbConn.getAutoCommit();
            try
            {
                operationsStat = dbConn.createStatement();
                List<Operation> operationList = currentOperations.getOperation();
                String qBaseOperationInsert = new StringBuilder().append("INSERT INTO xxodi.xxtu_operations ( ").append(
                   " PROCESS_ID, ").append(" OPERATION_ID, ").append(" OPERATION_NUM, ").append(" DEPARTMENT, ").append(
                   " SITE, ").append(" OPERATION_NAME, ").append(" OPERATION_TYPE, ").append(
                   " OPERATION_SUBTYPE, ").append(" NORM_TIME, ").append(" EQUIP_CODE, ").append(
                   " EQUIP_MODEL, ").append(" EQUIP_NAME, ").append(" LAST_UPDATE_DATE ) ").toString();
                for (Operation currentOperation : operationList)
                {   // Проход по операциям тех. процесса
                    if (currentOperation == null)
                        continue;
                    int operationId = currentOperation.getOperId();
                    String operationNumber = processStringField(currentOperation.getOperNum());
                    String department = processStringField(currentOperation.getDepartment());
                    String site = processStringField(currentOperation.getSite());
                    String operationName = processStringField(currentOperation.getOperName());
                    String operationType = processStringField(currentOperation.getOperType());
                    String operationSubtype = processStringField(currentOperation.getOperSubtype());
                    double normType = currentOperation.getNormTime() == null ? 0.0 : currentOperation.getNormTime();
                    String equipCode = processStringField(currentOperation.getEquipCode());
                    String equipModel = processStringField(currentOperation.getEquipModel());
                    String equipName = processStringField(currentOperation.getEquipName());
                    String oracleCurrentDate = "SYSDATE";

                    StringBuilder commandBuilder = new StringBuilder(qBaseOperationInsert);
                    commandBuilder.append(" VALUES ( ");
                    commandBuilder.append(currentProcessId).append(", ");
                    commandBuilder.append(operationId).append(", ");
                    commandBuilder.append(operationNumber).append(", ");
                    commandBuilder.append(department).append(", ");
                    commandBuilder.append(site).append(", ");
                    commandBuilder.append(operationName).append(", ");
                    commandBuilder.append(operationType).append(", ");
                    commandBuilder.append(operationSubtype).append(", ");
                    commandBuilder.append(normType).append(", ");
                    commandBuilder.append(equipCode).append(", ");
                    commandBuilder.append(equipModel).append(", ");
                    commandBuilder.append(equipName).append(", ");
                    commandBuilder.append(oracleCurrentDate).append(')');
                    operationsStat.addBatch(commandBuilder.toString());

                    if (currentOperation.getSteps() != null)
                    {
                        Steps steps = currentOperation.getSteps();
                        if (steps.getStep() != null)
                        {
                            if (!steps.getStep().isEmpty())
                            {
                                Statement tripStat = null;
                                String qBaseTripInsert = new StringBuilder().append(
                                   "INSERT INTO xxodi.xxtu_steps ( ").append(" PROCESS_ID, ").append(
                                   " OPERATION_ID, ").append(" STEP_NUM, ").append(" STEP_NAME, ").append(
                                   " WORK_TYPE_CODE, ").append(" NORM_TIME, ").append(" LAST_UPDATE_DATE) ").toString();
                                try
                                {
                                    tripStat = dbConn.createStatement();
                                    for (Step currentStep : steps.getStep())
                                    {   // Проход по переходам
                                        if (currentStep == null)
                                            continue;
                                        int stepNum = currentStep.getStepNum();
                                        String stepName = processStringField(currentStep.getStepName());
                                        String workTypeCode = processStringField(currentStep.getWorkTypeCode());
                                        double stepNormTime = currentStep.getNormTime();

                                        StringBuilder tripBuilder = new StringBuilder(qBaseTripInsert);
                                        tripBuilder.append(" VALUES ( ");
                                        tripBuilder.append(currentProcessId).append(", ");
                                        tripBuilder.append(operationId).append(", ");
                                        tripBuilder.append(stepNum).append(", ");
                                        tripBuilder.append(stepName).append(", ");
                                        tripBuilder.append(workTypeCode).append(", ");
                                        tripBuilder.append(stepNormTime).append(", ");
                                        tripBuilder.append(oracleCurrentDate).append(')');
                                        tripStat.addBatch(tripBuilder.toString());
                                    }

                                    deleteStepsIfExist(currentProcessId, operationId);
                                    int[] tripUpdateCount = tripStat.executeBatch();
                                    for (int batchType : tripUpdateCount)
                                        if (batchType > 0)
                                            affectedSteps += batchType;
                                }
                                finally
                                {
                                    if (tripStat != null && !tripStat.isClosed())
                                        tripStat.close();
                                }
                            }
                        }
                    }
                }

                deleteOperationsIfExist(currentProcessId);
                int[] opUpdateCount = operationsStat.executeBatch();
                for (int batchType : opUpdateCount)
                    if (batchType > 0)
                        affectedOperations += batchType;

                dbConn.commit();
                affectedProcesses++;
            }
            catch (SQLException sqlEx)
            {
                dbConn.rollback();
                throw sqlEx;
            }
            finally
            {
                if (operationsStat != null && !operationsStat.isClosed())
                    operationsStat.close();
            }
            dbConn.setAutoCommit(autoCommit);
        }

        actionResult.setMessage(affectedProcesses + " processed");
        actionResult.setResult(affectedOperations + " operations affected. "
            + affectedSteps + " steps affected");

        return actionResult;
    }

    /**
     * Удаление операций тех. процесса
     * @param processId Номер тех. процесса
     * @return Число удаленных строк
     * @throws SQLException
     */
    private int deleteOperationsIfExist(long processId) throws SQLException
    {
        int affected = 0;
        String qDelOperations = String.format("DELETE FROM xxodi.xxtu_operationsWHERE process_id = ?");
        PreparedStatement operationsStat = null;
        boolean autoCommit = dbConn.getAutoCommit();
        try
        {
            dbConn.setAutoCommit(false);
            operationsStat = dbConn.prepareStatement(qDelOperations);
            operationsStat.setLong(1, processId);
            affected = operationsStat.executeUpdate();
            dbConn.commit();
        }
        catch (SQLException sqlEx)
        {
            dbConn.rollback();
            throw sqlEx;
        }
        finally
        {
            if (operationsStat != null && !operationsStat.isClosed())
                operationsStat.close();
        }
        dbConn.setAutoCommit(autoCommit);

        return affected;
    }

    /**
     * Удаление переходов операции тех. процесса, если они были
     * @param processId   Номер тех. процесса
     * @param operationId Номер операции
     * @return Число удаленных строк
     * @throws SQLException
     */
    private int deleteStepsIfExist(long processId, int operationId) throws SQLException
    {
        int affected = 0;
        String qDelSteps = String.format("DELETE FROM xxodi.xxtu_steps WHERE process_id = ?AND operation_id = ?");
        PreparedStatement stepsStat = null;
        boolean autoCommit = dbConn.getAutoCommit();
        try
        {
            dbConn.setAutoCommit(false);
            stepsStat = dbConn.prepareStatement(qDelSteps);
            stepsStat.setLong(1, processId);
            stepsStat.setInt(2, operationId);
            affected = stepsStat.executeUpdate();
            dbConn.commit();
        }
        catch (SQLException sqlEx)
        {
            dbConn.rollback();
            throw sqlEx;
        }
        finally
        {
            if (stepsStat != null && !stepsStat.isClosed())
                stepsStat.close();
        }
        dbConn.setAutoCommit(autoCommit);

        return affected;
    }

    /**
     * Обработка поля символьного типа для передачи СУБД Oracle с контролем длины полей.
     * @param field     Поле для обработки
     * @param trimLimit Предельная длина поля в СУБД
     * @return Строка, готовая для передачи СУБД
     */
    private static String processStringField(String field, int trimLimit)
    {
        if (field == null)
            return "NULL";
        String lField = field.trim();
        if (lField.length() > trimLimit)
            lField = lField.substring(0, trimLimit);
        return "'" + lField + "'";
    }

    /**
     * Обработка поля символьного типа для передачи СУБД Oracle без обработки.
     * @param field Поле для обработки
     * @return Строка, готовая для передачи СУБД
     */
    private static String processStringField(String field)
    {
        if (field == null)
            return "NULL";
        return "'" + field + "'";
    }
}
