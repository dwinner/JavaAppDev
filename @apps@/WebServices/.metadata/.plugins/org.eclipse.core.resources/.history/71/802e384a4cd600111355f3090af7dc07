package ru.aztpa.a.vfp.mfg.wiptransfers.v01;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

import static ru.aztpa.a.vfp.mfg.wiptransfers.v01.ConnectionManager.getConnection;
import static ru.aztpa.a.vfp.mfg.wiptransfers.v01.StringUtilities.isNullOrEmpty;

/**
 * Класс, делегирующий все операции Web-сервиса
 *
 * @author jdeveloper@aztpa.ru
 * @version 1.0.0 16-07-2012
 */
class WipTransfersHelper
{
   /**
    * Фабричный метод генерации объекта
    *
    * @param sourceDepartment Код цеха-отправителя ДСЕ
    * @return Объект sourceDepartment
    */
   static WipTransfersHelper createWipTransferHelper(String sourceDepartment)
   {
      return new WipTransfersHelper(sourceDepartment);
   }

   /**
    * Фабричный метод генерации объекта
    *
    * @param sourceDepartment Цех-отправитель ДСЕ
    * @return Объект sourceDepartment
    */
   static WipTransfersHelper createWipTransferHelper(Department sourceDepartment)
   {
      return new WipTransfersHelper(sourceDepartment);
   }
   static final String DEFAULT_TABLE_NAME = "RASXOD";
   private String pathToProcTable;  // Путь к соотв. файлу RASXOD.dbf
   private List<String> existedManufactories; // Существующие номера цехов
   private List<String> existedWarehouses; // Существующие номера складов
   private Connection connection;
   private final Department sourceDep;

   Department getSourceDep()
   {
      return sourceDep;
   }

   /**
    * Инициализатор для цеха-отправителя ДСЕ
    *
    * @param sourceDepartment Цех-отправитель ДСЕ
    */
   private WipTransfersHelper(String sourceDepartment)
   {
      if (sourceDepartment == null || sourceDepartment.trim().isEmpty())
      {
         throw new IllegalArgumentException("source department must be not empty");
      }

      sourceDep = new Department();
      sourceDep.setDepCode(sourceDepartment);
      try
      {
         connection = getConnection();         
         String relPath = XmlConfigReader.getInstance().retrieveDepartmentPath(sourceDepartment);
         connection.setCatalog(relPath);
         pathToProcTable = DEFAULT_TABLE_NAME;              
         sourceDep.setDepName(retrieveDepNameByCode(sourceDepartment));
      }
      catch (IOException ex)
      {
         throw new RuntimeException(ex.getLocalizedMessage());
      }
      catch (SQLException sqlEx)
      {
         throw new RuntimeException(sqlEx);
      }
      catch (WrongConfigurationException configEx)
      {
         throw new RuntimeException(configEx);
      }
   }

   /**
    * Получение наименования цеха по его коду
    *
    * @param sourceDepartment Код цеха
    * @return Наименование цеха
    * @throws SQLException
    */
   private String retrieveDepNameByCode(String sourceDepartment)
     throws SQLException
   {
      String sqlQ = String.format("select naim from %s where cex = '%s'", pathToProcTable, sourceDepartment);
      PreparedStatement pstat = connection.prepareStatement(sqlQ);
      ResultSet resultSet = pstat.executeQuery();
      if (resultSet.next())
      {
         return resultSet.getString(1);
      }
      else
      {
         throw new SQLException("Source department name with code " + sourceDepartment + " doesn't exists");
      }
   }

   /**
    * Инициализатор для цеха-отправителя ДСЕ
    *
    * @param sourceDepartment Цех-отправитель ДСЕ
    */
   private WipTransfersHelper(Department sourceDepartment)
   {
      checkSourceDepartment(sourceDepartment);
      sourceDep = sourceDepartment;
      /*
       String sourceName = sourceDepartment.getDepName().trim(); // Имя цеха-отправителя ДСЕ
       String sourceCode = sourceDepartment.getDepCode().trim(); // Код цеха-отправителя ДСЕ 
       */
      try
      {
         connection = getConnection();         
         String relPath = XmlConfigReader.getInstance().retrieveDepartmentPath(sourceDepartment.getDepCode());
         pathToProcTable = !relPath.isEmpty() ? relPath + DEFAULT_TABLE_NAME : DEFAULT_TABLE_NAME;
         existedManufactories = new ArrayList<String>(16);
         existedWarehouses = new ArrayList<String>(16);
         retrieveRestrictedManufactories();
         retrieveRestrictedWarehouses();
      }
      catch (IOException ex)
      {
         throw new RuntimeException(ex.getLocalizedMessage());
      }
      catch (SQLException ex)
      {
         throw new RuntimeException(ex.getLocalizedMessage());
      }
      catch (WrongConfigurationException configEx)
      {
         throw new RuntimeException(configEx);
      }
   }

   /**
    * Проверка цеха-отправителя ДСЕ на допустимые значения.
    *
    * @param sourceDepartment Цех-отправитель ДСЕ
    * @throws AssertionError
    * @throws IllegalArgumentException
    */
   private void checkSourceDepartment(Department sourceDepartment)
     throws AssertionError, IllegalArgumentException
   {
      if (sourceDepartment == null)
      {
         throw new IllegalArgumentException("sourceDepartment cannot be null");
      }
      if (isNullOrEmpty(sourceDepartment.getDepCode()))
      {
         throw new AssertionError("Department code must be not empty");
      }
      if (isNullOrEmpty(sourceDepartment.getDepName()))
      {
         throw new AssertionError("Department name must be not empty");
      }
   }

   /**
    * Проверка строк сопроводительной накладной на корректность.
    *
    * @param transferDocs Строки сопроводительной накладной
    * @throws AssertionError
    * @throws IllegalArgumentException
    */
   private void checkTransferDocs(TransferDocs transferDocs)
     throws AssertionError, IllegalArgumentException
   {
      if (transferDocs == null)
      {
         throw new IllegalArgumentException("Transfer docs cannot be null");
      }
      if (transferDocs.getTransferDoc() == null || transferDocs.getTransferDoc().isEmpty())
      {
         throw new AssertionError("Transfer docs must at least one record");
      }
   }

   /**
    * Проверка на наличие уникальности записи
    *
    * @param transfer Элемент сопроводительной накладной
    * @return true, если такая запись существует, false в противном случае
    */
   private boolean transferExists(AssemblyUnitTransfer transfer)
     throws SQLException
   {
      StringBuilder builtQ = new StringBuilder(128).append("SELECT 1 FROM ").append(pathToProcTable).append(
        " WHERE GOD = ").append(transfer.getYear()).append(" AND MC = ").append(transfer.getMonth()).append(
        " AND IIF(SKLAD = '', CEX, SKLAD) = '").append(transfer.getTargetCode()).append("' ").append(
        " AND NDOK = '").append(transfer.getDocNum()).append("' ").append(" AND KDET = '").append(
        transfer.getItemCode()).append("' ").append(" AND KOLDET = ").append(transfer.getItemsPerBillet());

      // -- Наличие необязательных атрибутов

      if (!isNullOrEmpty(transfer.getMaterialCode())) // Включать ли код материала
      {
         builtQ.append(" AND KTO = '").append(transfer.getMaterialCode()).append("' ");
      }
      if (!isNullOrEmpty(transfer.getMeltCode()))  // Включать ли номер плавки
      {
         builtQ.append(" AND PLAVKA = '").append(transfer.getMeltCode()).append("' ");
      }
      if (!isNullOrEmpty(transfer.getMaterialSort())) // Включать ли марку материала
      {
         builtQ.append(" AND MARKA = '").append(transfer.getMaterialSort()).append("' ");
      }
      if (!isNullOrEmpty(transfer.getPhysicalProperties())) // Включать ли механические свойства
      {
         builtQ.append(" AND MEH_SV = '").append(transfer.getPhysicalProperties()).append("' ");
      }
      if (!isNullOrEmpty(transfer.getChemicalProperties())) // Включать ли химические свойства
      {
         builtQ.append(" AND HIM = '").append(transfer.getChemicalProperties()).append("' ");
      }

      PreparedStatement statement = null;
      ResultSet resultSet = null;
      try
      {
         statement = connection.prepareStatement(builtQ.toString());
         resultSet = statement.executeQuery();
         return resultSet.next();
      }
      finally
      {
         if (resultSet != null && !resultSet.isClosed())
         {
            resultSet.close();
         }
         if (statement != null && !statement.isClosed())
         {
            statement.close();
         }
      }
   }

   /**
    * Обновление записей сопроводительной накладной
    *
    * @param updateTransfers Список записей для обновления
    * @return Количество обновленных записей
    */
   private int executeUpdateTransfers(List<AssemblyUnitTransfer> updateTransfers)
     throws SQLException
   {
      String updateQuery = new StringBuilder(128).append("UPDATE ").append(pathToProcTable).append(" SET ").
        append(
        " CEXVI = ? ,").append(" GOD = ? ,").append(" MC = ? ,").append(" NDOK = ? ,").append(" DATA = ? ,").
        append(
        " DATA_SKLAD = ? ,").append(" SKLAD = ? ,").append(" CEX = ? ,").append(" KD = ? ,").append(
        " MES = ? ,").append(" KDET = ? ,").append(" KOL = ? ,").append(" CENA = ? ,").append(" KTO = ? ,").
        append(
        " MARKA = ? ,").append(" PLAVKA = ? ,").append(" MEH_SV = ? ,").append(" HIM = ? ,").append(
        " KOLDET = ? ,").append(" TIME_SKLAD = ? ,").append(" ZAG_MET = ? ,").append(" USER_SKLAD = ? ,").
        append(
        " PASPORT = ? ,").append(" RAZM = ? ,").append(" PRIM = ? ,").append(" NAIM = ? ").toString();
      int updated = 0;

      PreparedStatement updateStatement = null;
      boolean autoCommit = false;
      try
      {
         autoCommit = connection.getAutoCommit();
         connection.setAutoCommit(false);
         updateStatement = connection.prepareStatement(updateQuery);
         for (AssemblyUnitTransfer assemblyUnitTransfer : updateTransfers)
         {
            updateStatement.clearParameters();
            updateStatement.setString(1, sourceDep.getDepCode().trim());
            updateStatement.setInt(2, assemblyUnitTransfer.getYear());
            updateStatement.setInt(3, assemblyUnitTransfer.getMonth());
            updateStatement.setString(4, assemblyUnitTransfer.getDocNum());

            Date docDate = assemblyUnitTransfer.getDocCal().toGregorianCalendar().getTime();
            updateStatement.setDate(5, new java.sql.Date(docDate.getTime()));

            Date lastUpdateDate = assemblyUnitTransfer.getLastUpdateCal().toGregorianCalendar().getTime();
            updateStatement.setDate(6, new java.sql.Date(lastUpdateDate.getTime()));

            String targetCode = assemblyUnitTransfer.getTargetCode();

            // Проверим, склад ли это или цех

            boolean isManufacture = false;
            boolean isWarehouse = false;
            for (String manufacture : existedManufactories)
            {
               if (targetCode.equalsIgnoreCase(manufacture))
               {
                  isManufacture = true;
                  break;
               }
            }
            if (!isManufacture)
            {
               for (String warehouse : existedWarehouses)
               {
                  if (targetCode.equalsIgnoreCase(warehouse))
                  {
                     isWarehouse = true;
                     break;
                  }
               }
            }
            if (isWarehouse)
            {
               updateStatement.setString(7, targetCode);
               updateStatement.setString(8, "");
            }
            else if (isManufacture)
            {
               updateStatement.setString(7, "");
               updateStatement.setString(8, targetCode);
            }
            else
            {
               throw new RuntimeException("Eighter 'SKLAD' or 'CEX' must have");
            }

            updateStatement.setString(9, assemblyUnitTransfer.getDispather());
            updateStatement.setInt(10, assemblyUnitTransfer.getSite());
            updateStatement.setString(11, assemblyUnitTransfer.getItemCode());
            updateStatement.setDouble(12, assemblyUnitTransfer.getQuantity());
            updateStatement.setDouble(13, assemblyUnitTransfer.getItemCost());
            updateStatement.setString(14, assemblyUnitTransfer.getMaterialCode());
            updateStatement.setString(15, assemblyUnitTransfer.getMaterialSort());
            updateStatement.setString(16, assemblyUnitTransfer.getMeltCode());
            updateStatement.setString(17, assemblyUnitTransfer.getPhysicalProperties());
            updateStatement.setString(18, assemblyUnitTransfer.getChemicalProperties());
            updateStatement.setInt(19, assemblyUnitTransfer.getItemsPerBillet());
            updateStatement.setString(20, assemblyUnitTransfer.getOutsourceItemCode());
            updateStatement.setDouble(21, assemblyUnitTransfer.getOutsourceItemWeight());
            updateStatement.setString(22, assemblyUnitTransfer.getFinishedGoodFigure());
            updateStatement.setString(23, assemblyUnitTransfer.getCertificate());
            updateStatement.setString(24, assemblyUnitTransfer.getItemSize());
            updateStatement.setString(25, assemblyUnitTransfer.getNotes());
            updateStatement.setString(26, assemblyUnitTransfer.getTargetName());

            updateStatement.addBatch();
         }

         int[] _affected = updateStatement.executeBatch();
         for (int i : _affected)
         {
            if (i > 0)
            {
               updated += i;
            }
         }
      }
      catch (SQLException sqlEx)
      {
         connection.rollback();
         throw sqlEx;
      }
      finally
      {
         connection.setAutoCommit(autoCommit);
         if (updateStatement != null && !updateStatement.isClosed())
         {
            updateStatement.clearParameters();
            updateStatement.clearBatch();
            updateStatement.close();
         }
      }

      return updated;
   }

   /**
    * Вставка записей сопроводительной накладной
    *
    * @param insertTransfers Список записей для вставки
    * @return Количество вставленных записей
    */
   private int executeInsertTransfers(List<AssemblyUnitTransfer> insertTransfers)
     throws SQLException
   {
      String insertQuery = new StringBuilder(128).append("INSERT INTO ").append(pathToProcTable).append(" ( ").
        append(
        "CEXVI, ").append("GOD, ").append("MC, ").append("NDOK, ").append("DATA, ").append("DATA_SKLAD, ").
        append(
        "SKLAD, ").append("CEX, ").append("KD, ").append("MES, ").append("KDET, ").append("KOL, ").append(
        "CENA, ").append("KTO, ").append("MARKA, ").append("PLAVKA, ").append("MEH_SV, ").append("HIM, ").
        append(
        "KOLDET, ").append("TIME_SKLAD, ").append("ZAG_MET, ").append("USER_SKLAD, ").append("PASPORT, ").
        append(
        "RAZM, ").append("PRIM, ").append("NAIM) ").append(
        "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
      int inserted = 0;

      PreparedStatement insertStatement = null;
      boolean autoCommit = false;
      try
      {
         autoCommit = connection.getAutoCommit();
         connection.setAutoCommit(false);
         insertStatement = connection.prepareStatement(insertQuery);
         for (AssemblyUnitTransfer assemblyUnitTransfer : insertTransfers)
         {
            insertStatement.clearParameters();
            insertStatement.setString(1, sourceDep.getDepCode().trim());
            insertStatement.setInt(2, assemblyUnitTransfer.getYear());
            insertStatement.setInt(3, assemblyUnitTransfer.getMonth());
            insertStatement.setString(4, assemblyUnitTransfer.getDocNum());

            Date docDate = assemblyUnitTransfer.getDocCal().toGregorianCalendar().getTime();
            insertStatement.setDate(5, new java.sql.Date(docDate.getTime()));

            Date lastUpdateDate = assemblyUnitTransfer.getLastUpdateCal().toGregorianCalendar().getTime();
            insertStatement.setDate(6, new java.sql.Date(lastUpdateDate.getTime()));

            String targetCode = assemblyUnitTransfer.getTargetCode();

            // -- Склад ли это или же цех, проверим...

            boolean isManufacture = false;
            boolean isWarehouse = false;
            for (String manufacture : existedManufactories)
            {
               if (targetCode.equalsIgnoreCase(manufacture))
               {
                  isManufacture = true;
                  break;
               }
            }
            if (!isManufacture)
            {
               for (String warehouse : existedWarehouses)
               {
                  if (targetCode.equalsIgnoreCase(warehouse))
                  {
                     isWarehouse = true;
                     break;
                  }
               }
            }
            if (isWarehouse)
            {
               insertStatement.setString(7, targetCode);
               insertStatement.setString(8, "");
            }
            else if (isManufacture)
            {
               insertStatement.setString(7, "");
               insertStatement.setString(8, targetCode);
            }
            else
            {
               // PENDING: -- Данные неоднозначны. Пока что считаем, что это - новый склад
               insertStatement.setString(7, targetCode);
               insertStatement.setString(8, "");
            }

            insertStatement.setString(9, assemblyUnitTransfer.getDispather());
            insertStatement.setInt(10, assemblyUnitTransfer.getSite());
            insertStatement.setString(11, assemblyUnitTransfer.getItemCode());
            insertStatement.setDouble(12, assemblyUnitTransfer.getQuantity());
            insertStatement.setDouble(13, assemblyUnitTransfer.getItemCost());
            insertStatement.setString(14, assemblyUnitTransfer.getMaterialCode());
            insertStatement.setString(15, assemblyUnitTransfer.getMaterialSort());
            insertStatement.setString(16, assemblyUnitTransfer.getMeltCode());
            insertStatement.setString(17, assemblyUnitTransfer.getPhysicalProperties());
            insertStatement.setString(18, assemblyUnitTransfer.getChemicalProperties());
            insertStatement.setInt(19, assemblyUnitTransfer.getItemsPerBillet());
            insertStatement.setString(20, assemblyUnitTransfer.getOutsourceItemCode());
            insertStatement.setDouble(21, assemblyUnitTransfer.getOutsourceItemWeight());
            insertStatement.setString(22, assemblyUnitTransfer.getFinishedGoodFigure());
            insertStatement.setString(23, assemblyUnitTransfer.getCertificate());
            insertStatement.setString(24, assemblyUnitTransfer.getItemSize());
            insertStatement.setString(25, assemblyUnitTransfer.getNotes());
            insertStatement.setString(26, assemblyUnitTransfer.getTargetName());

            insertStatement.addBatch();
         }

         int[] _inserted = insertStatement.executeBatch();
         for (int i : _inserted)
         {
            if (i > 0)
            {
               inserted += i;
            }
         }
      }
      catch (SQLException ex)
      {
         connection.rollback();
         throw ex;
      }
      finally
      {
         connection.setAutoCommit(autoCommit);
         if (insertStatement != null && !insertStatement.isClosed())
         {
            insertStatement.clearParameters();
            insertStatement.clearBatch();
            insertStatement.close();
         }
      }

      return inserted;
   }

   /**
    * Извлечение набора номеров цехов.
    */
   private void retrieveRestrictedManufactories()
     throws SQLException
   {
      String qString = String.format("SELECT distinct(trim(CEX)) AS CEX FROM %s WHERE CEX <> NULL",
                                     pathToProcTable);
      PreparedStatement statement = null;
      ResultSet resultSet = null;
      try
      {
         statement = connection.prepareStatement(qString);
         resultSet = statement.executeQuery();
         while (resultSet.next())
         {
            String currentManufacture = resultSet.getString(1);
            if (!isNullOrEmpty(currentManufacture))
            {
               existedManufactories.add(currentManufacture);
            }
         }
      }
      finally
      {
         if (resultSet != null && !resultSet.isClosed())
         {
            resultSet.close();
         }
         if (statement != null && !statement.isClosed())
         {
            statement.close();
         }
      }
   }

   /**
    * Извлечение набора номеров складов.
    */
   private void retrieveRestrictedWarehouses()
     throws SQLException
   {
      String qString = String.format("SELECT distinct(trim(SKLAD)) AS SKLAD FROM %s WHERE SKLAD <> NULL",
                                     pathToProcTable);
      PreparedStatement statement = null;
      ResultSet resultSet = null;
      try
      {
         statement = connection.prepareStatement(qString);
         resultSet = statement.executeQuery();
         while (resultSet.next())
         {
            String currentWarehouse = resultSet.getString(1);
            if (!isNullOrEmpty(currentWarehouse))
            {
               existedWarehouses.add(currentWarehouse);
            }
         }
      }
      finally
      {
         if (resultSet != null && !resultSet.isClosed())
         {
            resultSet.close();
         }
         if (statement != null && !statement.isClosed())
         {
            statement.close();
         }
      }
   }

   /**
    * Операция добавления информации о перемещении ДСЕ в файл RASXOD.dfb цеха-отправителя ДСЕ
    *
    * @param transferDocs Информации о перемещении ДСЕ
    * @return Объект результата выполнения операции
    */
   ActionResult synchronizeTransferDocs(TransferDocs transferDocs)
   {
      checkTransferDocs(transferDocs);

      ActionResult actionResult = new ActionResult();
      int updated = 0, inserted = 0;

      List<AssemblyUnitTransfer> insertTransfers = new ArrayList<AssemblyUnitTransfer>(0xFF + 1);
      List<AssemblyUnitTransfer> updateTransfers = new ArrayList<AssemblyUnitTransfer>(0xFF + 1);

      for (int i = 0; i < transferDocs.getTransferDoc().size(); i++)
      {
         TransferDoc currentDoc = transferDocs.getTransferDoc().get(i);

         int year = currentDoc.getYear(); // Год плана
         int month = currentDoc.getMonth();  // Месяц плана
         String docNum = currentDoc.getDocNum(); // Номер сопроводительной накладной
         if (isNullOrEmpty(docNum))
         {
            throw new AssertionError("docNum must be filled");
         }
         docNum = docNum.trim();

         // Дата документа (сопроводительной накладной)
         XMLGregorianCalendar docCal = currentDoc.getDocDate();

         // Дата последнего изменения сопроводительной накладной
         XMLGregorianCalendar lastUpdateCal = currentDoc.getLastUpdateDate();

         String dispather = currentDoc.getDispatcher();  // Диспетчер
         dispather = isNullOrEmpty(dispather) ? "" : dispather.trim();
         int site = currentDoc.getSite();   // Участок цеха отправителя ДСЕ               

         Department department = currentDoc.getDestination();
         if (department == null)
         {
            throw new AssertionError("Department must have");
         }

         String targetCode = department.getDepCode(); // Код получателя ДСЕ
         if (isNullOrEmpty(targetCode))
         {
            throw new AssertionError("SKLAD/CEX must be filled");
         }
         targetCode = targetCode.trim();

         String targetName = department.getDepName(); // Имя получателя ДСЕ
         targetName = isNullOrEmpty(targetName) ? "" : targetName.trim();

         List<DocLine> docLines = currentDoc.getDocLines().getDocLine();
         if (docLines == null || docLines.isEmpty())
         {
            throw new AssertionError("Must have at least one document line entity");
         }

         for (int j = 0; j < docLines.size(); j++)
         {
            DocLine docLine = docLines.get(j);
            if (docLine == null)
            {
               throw new RuntimeException("document line null! Look at WSDL lying under JAX-WS");
            }

            String itemCode = docLine.getItemCode();  // Код ДСЕ
            if (isNullOrEmpty(itemCode))
            {
               throw new AssertionError("item code must be filled");
            }
            itemCode = itemCode.trim();

            String itemName = docLine.getItemName();  // Имя ДСЕ
            if (isNullOrEmpty(itemName))
            {
               throw new AssertionError("item name must be filled");
            }
            itemName = itemName.trim();

            double quantity = docLine.getQuantity();  // Перемещенное кол-во

            // -- Необязательные параметры

            double itemCost = docLine.getItemCost();  // Условная стоимость
            String materialCode = docLine.getMaterialCode();   // Код матерала
            materialCode = isNullOrEmpty(materialCode) ? "" : materialCode.trim();

            String materialName = docLine.getMaterialName();   // Наименование материала
            materialName = isNullOrEmpty(materialName) ? "" : materialName.trim();

            String materialSort = docLine.getMaterialSort();   // Марка материала
            materialSort = isNullOrEmpty(materialSort) ? "" : materialSort.trim();

            String meltCode = docLine.getMeltCode();  // Номер плавки
            meltCode = isNullOrEmpty(meltCode) ? "" : meltCode.trim();

            String physicalProperties = docLine.getPhysicalProperties(); // Механические свойства
            physicalProperties = isNullOrEmpty(physicalProperties) ? "" : physicalProperties.trim();

            String chemicalProperties = docLine.getChemicalProperties(); // Химический состав
            chemicalProperties = isNullOrEmpty(chemicalProperties) ? "" : chemicalProperties.trim();

            int itemsPerBillet = docLine.getItemsPerBillet();  // Кол-во деталей в заготовке                                    

            // Код позиции - заготовки ОВК, из которой сделана деталь
            String outsourceItemCode = docLine.getOutsourceItemCode();
            outsourceItemCode = isNullOrEmpty(outsourceItemCode) ? "" : outsourceItemCode.trim();

            // Наименование позиции - заготовки ОВК, из которой сделана деталь
            String outsourceItemName = docLine.getOutsourceItemName();
            outsourceItemName = isNullOrEmpty(outsourceItemName) ? "" : outsourceItemName.trim();

            double outsourceItemWeight = docLine.getOutsourceItemWeight(); // Вес заготовки ОВК в кг

            // Конструкторское обозначение готового изделия, в состав которого входит ДСЕ
            String finishedGoodFigure = docLine.getFinishedGoodFigure();
            finishedGoodFigure = isNullOrEmpty(finishedGoodFigure) ? "" : finishedGoodFigure.trim();

            String certificate = docLine.getCertificate();  // Паспорт или сертификат
            certificate = isNullOrEmpty(certificate) ? "" : certificate.trim();

            String itemSize = docLine.getItemSize();  // Размер ДСЕ
            itemSize = isNullOrEmpty(itemSize) ? "" : itemSize.trim();

            String notes = docLine.getNotes();  // Примечание
            notes = isNullOrEmpty(notes) ? "" : notes.trim();

            AssemblyUnitTransfer transfer = new AssemblyUnitTransfer.Builder().setYear(year).setMonth(
              month).setDocNum(docNum).setDocCal(docCal).setLastUpdateCal(lastUpdateCal).
              setDispather(dispather).setSite(site).setTargetCode(targetCode).setTargetName(targetName).
              setItemCode(itemCode).setItemName(itemName).setQuantity(quantity).setItemCost(itemCost).
              setMaterialCode(materialCode).setMaterialName(materialName).setMaterialSort(materialSort).
              setMeltCode(meltCode).setPhysicalProperties(physicalProperties).setChemicalProperties(
              chemicalProperties).setItemsPerBillet(itemsPerBillet).setOutsourceItemCode(
              outsourceItemCode).setOutsourceItemName(outsourceItemName).setOutsourceItemWeight(
              outsourceItemWeight).setFinishedGoodFigure(finishedGoodFigure).setCertificate(certificate).
              setItemSize(itemSize).setNotes(notes).createAssemblyUnitTransfer();

            try
            {
               if (transferExists(transfer))
               {
                  updateTransfers.add(transfer);
               }
               else
               {
                  insertTransfers.add(transfer);
               }
            }
            catch (SQLException sqlEx)
            {
               try
               {
                  if (connection != null && !connection.isClosed())
                  {
                     connection.close();
                  }
                  actionResult.setStatus("ERROR");
                  actionResult.setReturnCode("-1");
                  actionResult.setMessage(sqlEx.getLocalizedMessage());
                  return actionResult;
               }
               catch (SQLException ex)
               {
                  Logger.getLogger(WipTransfersHelper.class.getName()).log(Level.SEVERE, null, ex);
               }
            }
         }

         try
         {
            if (updateTransfers.size() > 0)
            {
               Collections.sort(updateTransfers);
               updated = executeUpdateTransfers(updateTransfers);
            }
            if (insertTransfers.size() > 0)
            {
               Collections.sort(insertTransfers);
               inserted = executeInsertTransfers(insertTransfers);
            }
         }
         catch (SQLException sqlEx)
         {
            try
            {
               if (connection != null && !connection.isClosed())
               {
                  connection.close();
               }
               actionResult.setStatus("ERROR");
               actionResult.setReturnCode("-1");
               actionResult.setMessage(sqlEx.getLocalizedMessage());
               return actionResult;
            }
            catch (SQLException ex)
            {
               Logger.getLogger(WipTransfersHelper.class.getName()).log(Level.SEVERE, null, ex);
            }
         }
      }

      actionResult.setStatus("SUCCESS");
      actionResult.setReturnCode("0");
      actionResult.setMessage("Updated: " + updated + ". Inserted: " + inserted);
      return actionResult;
   }

   /**
    * Закрытие подключений.
    *
    * @return true, если подключение удалось закрыть
    */
   boolean closeConnection()
   {
      try
      {
         if (connection != null && connection.isClosed())
         {
            connection.close();
         }
         return true;
      }
      catch (SQLException ex)
      {
         return false;
      }
   }

   /**
    * Операция получения даты последнего изменения сопроводительной накладной.
    *
    * @return Дата последней синхронизации файла RASXOD.dfb цеха-отправителя ДСЕ
    */
   XMLGregorianCalendar getLastSyncDateForShop()
   {
      GregorianCalendar gCalendar = new GregorianCalendar();
      DatatypeFactory datatypeFactory = null;
      try
      {
         datatypeFactory = DatatypeFactory.newInstance();
      }
      catch (DatatypeConfigurationException ex)
      {
         Logger.getLogger(WipTransfersHelper.class.getName()).log(Level.SEVERE, null, ex);
      }

      String sqlQ = String.format("SELECT MAX(DATA_SKLAD) AS DATA_SKLAD FROM %s WHERE CEX = '%s'",
                                  pathToProcTable,
                                  sourceDep.getDepCode());

      PreparedStatement pstat = null;
      ResultSet resultSet = null;
      try
      {
         pstat = connection.prepareStatement(sqlQ);
         resultSet = pstat.executeQuery();
         if (resultSet.next())
         {
            java.sql.Date lastUpdateDate = resultSet.getDate(1);
            gCalendar.setTime(new Date(lastUpdateDate.getTime()));
            if (datatypeFactory != null)
            {
               return datatypeFactory.newXMLGregorianCalendar(gCalendar);
            }
            else
            {
               DatatypeConfigurationException dtEx = new DatatypeConfigurationException();
               dtEx.initCause(new NullPointerException("datatypeFactory object is null"));
               throw new SQLException(dtEx);
            }
         }
         else
         {
            throw new SQLException("There is no data for source department");
         }
      }
      catch (SQLException sqlEx)
      {
         throw new RuntimeException(sqlEx);
      }
      finally
      {
         try
         {
            if (resultSet != null && !resultSet.isClosed())
            {
               resultSet.close();
            }
            if (pstat != null && !pstat.isClosed())
            {
               pstat.close();
            }
         }
         catch (SQLException sqlEx)
         {
            throw new RuntimeException(sqlEx);
         }
      }
   }
}
